@page "/weather"

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null || _isCheckingLocation == true)
{
    <p><em>Loading...</em></p>
}
else 
{
    if (currLocation != null)
    {
        <p>
            @currLocation
        </p>
    }
    if (location != null)
    {
        <pre style="display:none">
            @(location["forecast"])
        </pre>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in location["forecast"]["forecastday"].AsArray())
                {
                    var date = DateTimeOffset.FromUnixTimeSeconds((long)forecast["date_epoch"]);
                    <tr>
                        <td>@date.Day/@date.Month/@date.Year</td>
                        <td>@forecast["day"]["mintemp_c"]-@forecast["day"]["maxtemp_c"]</td>
                        <td>@forecast["day"]["mintemp_f"]-@forecast["day"]["maxtemp_f"]</td>
                        <td><img src=@forecast["day"]["condition"]["icon"] />@forecast["day"]["condition"]["text"]</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    if (forecasts != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private WeatherForecast[]? forecasts;
    private CancellationTokenSource? _cancelTokenSource;
    private bool _isCheckingLocation = true;
    private Location? currLocation;
    static HttpClient client = new HttpClient();
    private System.Text.Json.Nodes.JsonObject? location;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await GetCachedLocation();
        if (currLocation != null)
        {
            HttpResponseMessage response = await client.GetAsync($"http://api.weatherapi.com/v1/forecast.json?key=8aee07ed794b48a5bf813829241106&q={currLocation.Latitude},{currLocation.Longitude}&days=5");
            location = await response.Content.ReadFromJsonAsync<System.Text.Json.Nodes.JsonObject>();
            // Console.WriteLine(await location["location"]);
        }
        await Task.Delay(500);
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private async Task GetCachedLocation()
    {
        try
        {
            Location? location = await Geolocation.Default.GetLastKnownLocationAsync();

            if (location != null)
            {
                currLocation = location;
                // return $"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}";
            }
            await GetCurrentLocation();

        }
        catch (FeatureNotSupportedException ex)
        {
            // Handle not supported on device exception
            throw new ArgumentException("Location is not supported.", ex);
        }
        catch (FeatureNotEnabledException ex)
        {
            // Handle not enabled on device exception
            throw new ArgumentException("Location is not enabled.", ex);
        }
        catch (PermissionException ex)
        {
            // Handle permission exception
            throw new ArgumentException("Permission to access location was not provided.", ex);
        }
        catch (Exception ex)
        {
            // Unable to get location
            throw new ArgumentException("Failed to get devices location.", ex);
        }

        // return "None";
        return;
    }

    private async Task GetCurrentLocation()
    {
        try
        {
            GeolocationRequest request = new GeolocationRequest(GeolocationAccuracy.Default, TimeSpan.FromSeconds(10));
#if IOS
            request.RequestFullAccuracy = true;
#endif
            _cancelTokenSource = new CancellationTokenSource();
            Location? location = await Geolocation.Default.GetLocationAsync(request, _cancelTokenSource.Token);

            if (location != null)
            {
                currLocation = location;
                Debug.WriteLine($"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}");
            }
        }
        // Catch one of the following exceptions:
        //   FeatureNotSupportedException
        //   FeatureNotEnabledException
        //   PermissionException
        catch (Exception ex)
        {
                // Unable to get location
            throw new ArgumentException("Failed to get devices location.", ex);
        }
        finally
        {
            _isCheckingLocation = false;
        }
    }

    private void CancelRequest()
    {
        if (_isCheckingLocation && _cancelTokenSource != null && _cancelTokenSource.IsCancellationRequested == false)
            _cancelTokenSource.Cancel();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        public string? Summary { get; set; }
    }
}
