@page "/weather"

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (_isCheckingLocation == true)
{
    <p><em>Loading...</em></p>
}
else 
{
    if (location != null && location.ContainsKey("forecast"))
    {
        var forecasts = location["forecast"];
        <pre style="display:none">
            @(forecasts)
        </pre>
        <div class="table-responsive">
        <table class="table">
            <colgroup><col /><col /><col /><col /><col /><col /></colgroup>
            <thead>
                <tr>
                    <th scope="col" class="text-center">Date</th>
                    <th scope="col" class="text-center">Min Temp. (C)</th>
                    <th scope="col" class="text-center">Max Temp. (C)</th>
                    <th scope="col" class="text-center">Min Temp. (F)</th>
                    <th scope="col" class="text-center">Max Temp. (F)</th>
                    <th scope="col">Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in location["forecast"]["forecastday"].AsArray())
                {
                    if(forecast != null)
                    {
                        var date = DateTimeOffset.FromUnixTimeSeconds((long)forecast["date_epoch"]);
                        <tr>
                            <td scope="row" class="text-center">@date.Day/@date.Month/@date.Year</td>
                            <td scope="row" class="text-center">@forecast["day"]["mintemp_c"]</td>
                            <td scope="row" class="text-center">@forecast["day"]["maxtemp_c"]</td>
                            <td scope="row" class="text-center">@forecast["day"]["mintemp_f"]</td>
                            <td scope="row" class="text-center">@forecast["day"]["maxtemp_c"]</td>
                            <td scope="row" class="table-text">Weather:<img src=@forecast["day"]["condition"]["icon"] width="25" />, Humidity: @forecast["day"]["avghumidity"]%, UV Index: @forecast["day"]["uv"]</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        </div>
    }
}

@code {
    private CancellationTokenSource? _cancelTokenSource;
    private bool _isCheckingLocation = true;
    private Location? currLocation;
    static HttpClient client = new HttpClient();
    private System.Text.Json.Nodes.JsonObject? location;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await GetCachedLocation();
        if (currLocation != null)
        {
            HttpResponseMessage response = await client.GetAsync($"http://api.weatherapi.com/v1/forecast.json?key=8aee07ed794b48a5bf813829241106&q={currLocation.Latitude},{currLocation.Longitude}&days=7");
            location = await response.Content.ReadFromJsonAsync<System.Text.Json.Nodes.JsonObject>();
            // Console.WriteLine(await location["location"]);
        }
        // await Task.Delay(500);
    }

    private async Task GetCachedLocation()
    {
        try
        {
            Location? location = await Geolocation.Default.GetLastKnownLocationAsync();

            if (location != null)
            {
                currLocation = location;
                // return $"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}";
            }
            await GetCurrentLocation();

        }
        catch (FeatureNotSupportedException ex)
        {
            // Handle not supported on device exception
            throw new FeatureNotSupportedException("Location is not supported.", ex);
        }
        catch (FeatureNotEnabledException ex)
        {
            // Handle not enabled on device exception
            throw new FeatureNotEnabledException("Location is not enabled.", ex);
        }
        catch (PermissionException ex)
        {
            // Handle permission exception
            throw new PermissionException("Permission to access location was not provided.");
        }
        catch (Exception ex)
        {
            // Unable to get location
            throw new Exception("Failed to get devices location.", ex);
        }

        // return "None";
        return;
    }

    private async Task GetCurrentLocation()
    {
        try
        {
            GeolocationRequest request = new GeolocationRequest(GeolocationAccuracy.Default, TimeSpan.FromSeconds(10));
#if IOS
            request.RequestFullAccuracy = true;
#endif
            _cancelTokenSource = new CancellationTokenSource();
            Location? location = await Geolocation.Default.GetLocationAsync(request, _cancelTokenSource.Token);

            if (location != null)
            {
                currLocation = location;
                Debug.WriteLine($"Latitude: {location.Latitude}, Longitude: {location.Longitude}, Altitude: {location.Altitude}");
            }
        }
        // Catch one of the following exceptions:
        //   FeatureNotSupportedException
        //   FeatureNotEnabledException
        //   PermissionException
        catch (Exception ex)
        {
                // Unable to get location
            throw new ArgumentException("Failed to get devices location.", ex);
        }
        finally
        {
            _isCheckingLocation = false;
        }
    }

    private void CancelRequest()
    {
        if (_isCheckingLocation && _cancelTokenSource != null && _cancelTokenSource.IsCancellationRequested == false)
            _cancelTokenSource.Cancel();
    }
}
